#!/bin/bash

# Doc for jq: https://stedolan.github.io/jq/manual/
# Doc for yq: https://github.com/kislyuk/yq

POSITIONAL=()
yq_output_option="--yaml-output"
source_folder=""
fail=""

while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        -j|--json)
            shift
            yq_output_option=""
        ;;

        -r|--recurse)
            shift
            source_folder="$1"
            shift
            if [[ ! -d "$source_folder" ]]; then
                fail="folder not found: $source_folder"
            fi
        ;;

        *)    # unknown option, save it in an array for later
            POSITIONAL+=("$1")
            shift
        ;;
    esac
done

# restore unhandled positional parameters
set -- "${POSITIONAL[@]}" 

# get last argument for query
query="${@: -1}"
if [[ -z "$query" ]]; then
    fail="empty query"
fi

# delete last argument to get filenames
set -- "${@:1:$(($#-1))}"


# check we didn't define both a folder and files
num_files=$#
if [[ -n "$source_folder" && "$num_files" -gt 0 ]]; then
    fail="cannot specify both folder and source files"
fi

# are we good to go?
if [[ -n "$fail" ]]; then
    echo "Error: $fail"
    echo "Usage: $0 [-j|--json] (-r|--recurse <folder> | [<file1> [<file2>...]]) <query>"
    exit 1
fi


# store our little JQ lib in a variable
read -r -d '' jq_lib <<'EOM'

# Shorthand to filter array elements
def filter(f):
    map(select(f));

# Trick to map empty objects and array to the empty result
def if_nonempty:
    [.[]] | select(length > 0)[0];

def trim:
    (sub("^[[:space:]]+"; "") | sub("[[:space:]]+$"; ""));

def splittrim(sep):
    if type == "null" then [] else (split(sep) | map(trim)) end;


# All accessors pipe back to $root if the input is nonempty.
# This allows to use them directly (e.g. yq 'id') and also
# as in a postfix notation to get this data from a filtered
# object (e.g. yq 'contributors | filter(...) | id').
# (This means that $root must be defined _before_ these
# functions in the jq input due to the way scoping works in jq.)

# Some attributes are raw (e.g. title), some are parsed by default with
# a raw variant (e.g. contributors and contributors_raw), some are raw
# by default but also have a parsed variant (e.g. id and id_parsed).

def filename:
    if_nonempty | $filename;
    
def filepath:
    if_nonempty | $filepath;
    
def id:
    if_nonempty | $root.id;
    
def parse_id:
    capture("^(?<year>[0-9]{4})-(?<country_code>[A-Z]{2})-(?<num>[0-9]{2})(?<variant>[a-z])?$");
    
def id_parsed:
    id | parse_id;

def title:
    if_nonempty | $root.title;

def ages:
    if_nonempty | $root.ages;

def answer_type:
    if_nonempty | $root.answer_type;

def categories:
    if_nonempty | $root.categories;

def parse_contributor:
    capture("^(?<name>[^\\(\\)]*) \\((?<country>[^,\\(\\)]*)\\), (?:\\[no email\\]|(?<email>(?:[a-zA-Z0-9_\\-\\.]+)@(?:(?:\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(?:(?:[a-zA-Z0-9\\-]+\\.)+))(?:[a-zA-Z]{2,4}|[0-9]{1,3})(?:\\]?)))(?: \\((?<role>[^,\\(\\)]*)\\))?$");

def contributors_raw:
    if_nonempty | $root.contributors;

def contributors:
    contributors_raw | map(parse_contributor);

def parse_keyword:
    capture("^(?<keyword>.+?)(?: - (?<urls>https?:\\/\\/[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[^\\s;,]*)(?:, +https?:\\/\\/[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[^\\s;,]*))*))? *$") | .urls |= splittrim(",");

def keywords_raw:
    if_nonempty | $root.keywords;

def keywords:
    keywords_raw | map(parse_keyword);

def keywords_only:
    keywords | map(.keyword);

def parse_support_file:
    capture("^(?<filename>.*) by (?<author>[^,\\(\\)]*) \\((?<license>.*)\\)$");

def support_files_raw:
    if_nonempty | $root.support_files;

def support_files:
    support_files_raw | map(parse_support_file);
EOM


function run_yq {
   local frontmatter=$(echo "$data" | awk '/---/{f=!f;if(!f){exit}else{next}}f')
   echo "$frontmatter" | yq $yq_output_option --argjson filename "\"$filename\"" --argjson filepath "\"$filepath\"" ". as \$root | $jq_lib $query" | sed '/\.\.\./d'
}

function run_yq_from_stdin {
    filepath="<stdin>"
    filename="<stdin>"
    data=$(cat -)
    run_yq
}

function run_yq_from_filepath {
    filename=$(basename "$filepath")
    data=$(cat "$filepath")
    run_yq
}

if [[ -n "$source_folder" ]]; then
    find "$source_folder" -name '*.task.md' | while read filepath; do
        run_yq_from_filepath
    done
elif (( num_files == 0 )); then
    run_yq_from_stdin
else
    for filepath in "$@"; do
        run_yq_from_filepath
    done
fi
